parseInt - https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Global_Objects/parseInt
parseFloat - https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Global_Objects/parseFloat
Неявные преобразования - https://habr.com/ru/company/ruvds/blog/347866/
Операторы сравнения и неявные преобразования - https://zakirov.net/blog/2019/06/22/compare-convert-js-cheatsheet/
Управление преобразованием объектов в другие типы (toString, valueOf, Symbol.toPrimitive) - https://learn.javascript.ru/object-toprimitive
Справочник по массивам и их методам - https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Global_Objects/Array
Справочник по строкам и их методам - https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Global_Objects/String

Задание:
Создайте панель управления студентами, на которой будут располагаться
- таблица со студентами с фильтрами и сортировкой
- форма добавления нового студента
Студенты должны храниться в массиве. Каждый студент - объект, содержащий следующие данные:
- имя
- фамилия
- отчество
- дата рождения (объект Date)
- факультет (строка)
Для добавления студентов на странице должна выводиться форма с полями, соответствующими данным студента.

Форма должна проходить валидацию по следующим правилам:
- все поля обязательны для заполнения после применения к значению метода trim()
- дата рождения находится в диапазоне от 01.01.1900 до текущей даты
Валидация должна происходить после нажатия на кнопку "добавить студента", расположенную под полями для ввода.
Если валидация прошла успешно, то все поля очищаются, а новый студент добавляется в таблицу. В противном случае над кнопкой
нужно вывести сообщения с описанием ошибок для пользователя. Тексты сообщений остаются на ваше усмотрение, но должны дать
достаточно информации, чтобы понять какие ошибки в каких полях были допущены.

Данные из массива должны выводиться в табличном виде. Каждая строка таблицы содержит информацию об одном студенте. Колонки таблицы:
- ФИО студента
- Факультет
- Дата рождения и возраст в формате "31.12.2000 (20 лет)". Возраст должен быть вычислен из даты рождения.
Первая строка таблицы - заголовочная, в ней указываются заголовки колонок (ФИО, Факультет, ДР и возраст, Годы обучения).

При нажатии на ячейку заголовочной строки должна происходить сортировка по соответствующим полям студентов:
- ФИО сортирует по соединённой строке из фамилии, имени и отчества по алфавиту по возрастанию
- Факультет - по факультету по алфавиту по возрастанию

Перед таблицей также нужно вывести фильтры, состоящие из полей:
- ФИО для поиска подстроки в фамилии, имени или отчестве
- Факультет для поиска подстроки в названии факультета

При любых изменениях в полях для фильтрации содержимое таблицы должно измениться в соответствии с указанными фильтрами.
Если указано несколько фильтров, то все они применяются к массиву студентов по очереди.

Проверка результата:
Убедитесь, что выполненное задание соответствует всем требованиями в его описании. Сортировка, фильтрация и добавление элемента
в массив приводят к перерисовке таблицы. Таблица всегда содержит актуальные данные.

Критерии оценки:
Исходный массив студентов меняется только при добавлении в него нового студента. Все остальные манипуляции (сортировка, фильтрация)
не должны его изменять. Методы массивов и строк применяются там, где это уместно. Манипуляции с DOM для перерисовки таблицы
 отделены от логики работы с данными студентов.

Рекомендации к выполнению:
В задании нет чётких требований к внешнему виду программы, но рекомендуем вам использовать готовые библиотеки для стилей вроде Bootstrap,
чтобы не верстать все элементы самостоятельно.

Для ввода даты рождения студента можно воспользоваться элементом input с атрибутом type="date".

Для хранения даты можно использовать специальный объект Date. Подробнее можете почитать по ссылкам:
- Объект Date - https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Global_Objects/Date
- <input type="date"> - https://developer.mozilla.org/ru/docs/Web/HTML/Element/Input/date

Чтобы получить из <input type="date"> объект даты Date, можно воспользоваться свойством DOM элемента этого поля valueAsDate.
В этом задании крайне важно отделение данных от представления. Это значит, что сначала нужно отдельно сформировать массив
со студентами, а только потом из получившегося массива создать DOM-дерево. При этом таблицу можно "перерисовывать" каждый раз,
когда набор выводимых элементов изменился. Такой подход позволит вам сильно упростить код, так как за отрисовку таблицы
будет отвечать простая функция, принимающая массив студентов, в то время как логика фильтрации, сортировки и добавления элемента
будет работать только с этим массивом без взаимодействия с DOM.
